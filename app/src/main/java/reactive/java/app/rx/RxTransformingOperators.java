/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reactive.java.app.rx;

import io.reactivex.rxjava3.core.Observable;

public class RxTransformingOperators {
    public static void main(String[] args) throws InterruptedException {

        Observable
                .just(1, 2, 3)
                .map(String::valueOf) //prints:  "1" ,"2", "3"
                .subscribe(System.out::println);
        System.out.println("\n");

        Observable
                .just(5, 7, 1)
                .sorted() //prints: 1,5,7
                .subscribe(System.out::println);
        System.out.println("\n");

        Observable
                .just(5, 7, 1)
                .scan((accumulator, item) -> accumulator + item) //prints: 1,5,7
                .subscribe(System.out::println);

        System.out.println("\n");

        Observable
                .range(0, 100)
                .buffer(10) // imitting chunks of list by 10
                .subscribe(System.out::println);

        System.out.println("\n");

        Observable
                .just("a", "a", "bb", "bb", "ccc", "ccc")
                .groupBy(item -> item.length()) // imitting chunks of list by 10
                .flatMapSingle(group -> group.toList())
                .subscribe(System.out::println);

        System.out.println("\n");

        Observable
                .just("a", "a", "bb", "bb", "ccc", "ccc")
                .flatMap(item -> Observable.just(item += "tt"))
                .subscribe(System.out::println);

        Observable
                .just("a", "a", "bb", "bb", "ccc", "ccc")
                .toList()
                .subscribe(System.out::println);

        Observable
                .just(1, 2)
                .mergeWith(Observable.just(3, 4))
                .subscribe(System.out::println);


        var first = Observable
                .just("a", "a", "bb", "bb", "ccc", "ccc");
        var second = Observable
                .just("a", "a", "bb", "bb", "ccc", "ccc");


        Observable.merge(first,second).subscribe(System.out::println);
        first.mergeWith(second).subscribe(System.out::println);


        first.zipWith(second,(item1,item2)-> String.format("%s %s",item1,item2)).subscribe(System.out::println);



    }

}
