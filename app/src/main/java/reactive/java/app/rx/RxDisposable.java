/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reactive.java.app.rx;

import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import io.reactivex.rxjava3.annotations.NonNull;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.core.Observer;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import io.reactivex.rxjava3.disposables.Disposable;
import io.reactivex.rxjava3.observables.ConnectableObservable;
import io.reactivex.rxjava3.observers.ResourceObserver;
import reactive.java.app.model.Item;

public class RxDisposable {
    public static void main(String[] args) throws InterruptedException {

        System.out.println("Start");

        disposableExample1();

        new Scanner(System.in).nextLine();
    }

    private static void disposableExample1() {
        Observable seconds = Observable.interval(1, TimeUnit.SECONDS);
        Disposable disposable = seconds.subscribe((item) -> System.out.println("Observer 1 - " + item));
        if (disposable.isDisposed())
            disposable.dispose();
    }

    private static void disposableExample2() {
        Observable seconds = Observable.interval(1, TimeUnit.SECONDS);

        CompositeDisposable disposable = new CompositeDisposable();

        seconds.subscribe(new Observer<Long>() {
            @Override
            public void onSubscribe(@NonNull Disposable d) {
                disposable.add(d);
            }

            @Override
            public void onNext(@NonNull Long o) {
                System.out.println("Observer 1 - " + o);
            }

            @Override
            public void onError(@NonNull Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        });
        disposable.dispose();
        ;

    }

    private static void disposableExample3() {
        Observable seconds = Observable.interval(1, TimeUnit.SECONDS);

        ResourceObserver resourceObserver = new ResourceObserver() {
            @Override
            public void onNext(@NonNull Object o) {
                System.out.println("Observer 1 - " + o);

            }

            @Override
            public void onError(@NonNull Throwable e) {

            }

            @Override
            public void onComplete() {

            }
        };

        seconds.subscribe(resourceObserver);
        resourceObserver.dispose();

    }

    private static void hotObservableExample() throws InterruptedException {
        ConnectableObservable observable = Observable.interval(1, TimeUnit.SECONDS).map(item -> new Item(item.intValue())).publish();
        observable.connect();

        observable.subscribe((item) -> System.out.println("Observer 1 - " + item));
        Thread.sleep(5000);

        observable.subscribe((item) -> System.out.println("Observer 2 - " + item));
        //  Thread.sleep(500);

        //  observable.subscribe((item) -> System.out.println("Observer 2 - " + item));
        //  observable.subscribe((item) -> System.out.println("Observer 3 - " + item));

    }

}
